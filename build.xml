<?xml version="1.0" encoding="UTF-8"?>
<project name="Phing static code analysis" default="all">
	<php expression="include('./vendor/autoload.php')" />

	<!-- Properties -->
	<property name="dir.base" value="${project.basedir}" />
	<property name="dir.tests" value="${project.basedir}/tests" />
	<property name="dir.tests.unit" value="${dir.tests}/unit" />
	<property name="dir.build" value="${project.basedir}/phing-build" />
	<property name="dir.docs" value="${dir.build}/docs" />
	<property name="dir.docs.phpdoc" value="${dir.docs}/phpdoc" />
	<property name="dir.reports.codecheck" value="${dir.build}/codecheck" />
	<property name="dir.reports.pdepend" value="${dir.build}/pdepend" />
	<property name="dir.reports.unit" value="${dir.build}/phpunit" />
	<property name="dir.reports.coverage" value="${dir.reports.unit}/coverage" />
	<property name="dir.reports.pdepend.build" value="${dir.reports.pdepend}/htmlreport" />

	<!-- ============================================ -->
	<!-- Fileset: sources (all php files but those in test) -->
	<!-- ============================================ -->
	<fileset expandsymboliclinks="true" dir="${dir.base}" id="sources">
		<include name="src/**/*.php" />
	</fileset>

	<!-- ============================================ -->
	<!-- Target: clean -->
	<!-- ============================================ -->
	<target name="clean" description="Clean up build directories.">
		<echo msg="Cleaning build directories ..." />
		<delete dir="${dir.build}" verbose="false" />
	</target>

	<!-- ============================================ -->
	<!-- Target: prepare-build-dir -->
	<!-- ============================================ -->
	<target name="prepare-build-dir">
		<echo msg="Creating build directory if it doesn't exist..." />
		<mkdir dir="${dir.build}" />
	</target>

	<!-- ============================================ -->
	<!-- Target: prepare-codecheck-dir -->
	<!-- ============================================ -->
	<target name="prepare-codecheck-dir" depends="prepare-build-dir" description="Create directories for codecheck results.">
		<echo msg="Creating codecheck results directory if it doesn't exist..." />
		<mkdir dir="${dir.reports.codecheck}" />
	</target>

	<!-- ============================================ -->
	<!-- Target: prepare-tests-dir -->
	<!-- ============================================ -->
	<target name="prepare-tests-dir" depends="prepare-build-dir" description="Create directories for tests and coverage results.">
		<echo msg="Creating test results directory if it doesn't exist..." />
		<mkdir dir="${dir.reports.unit}" />
		<mkdir dir="${dir.reports.coverage}" />
	</target>

	<!-- ============================================ -->
	<!-- Target: prepare-doc-dir -->
	<!-- ============================================ -->
	<target name="prepare-doc-dir" depends="prepare-build-dir" description="Create directories for documentation generation results.">
		<echo msg="Creating documentation generation results directory if it doesn't exist..." />
		<mkdir dir="${dir.docs}" />
		<mkdir dir="${dir.docs.phpdoc}" />
	</target>

	<!-- ============================================ -->
	<!-- Target: prepare-pdepend-dir -->
	<!-- ============================================ -->
	<target name="prepare-pdepend-dir" depends="prepare-build-dir" description="Create directories for pdepend results.">
		<echo msg="Creating pdepend results directory if it doesn't exist..." />
		<mkdir dir="${dir.reports.pdepend}" />
		<mkdir dir="${dir.reports.pdepend.build}" />
	</target>

	<!-- ============================================ -->
	<!-- Target: all (default target) -->
	<!-- ============================================ -->
	<target name="all" depends="clean">
		<phingcall target="codecheck" />
		<phingcall target="tests" />
		<phingcall target="documentation" />
	</target>

	<!-- ============================================ -->
	<!-- Target: codecheck (run all static code checks) -->
	<!-- ============================================ -->
	<target name="codecheck">
		<phingcall target="lint" />
		<phingcall target="codestyle" />
		<phingcall target="mess" />
		<phingcall target="copypaste" />
		<phingcall target="measure" />
	</target>

	<!-- ============================================ -->
	<!-- Target: tests (run all tests) -->
	<!-- ============================================ -->
	<target name="tests">
		<!-- Now we are not running unit tests -->
		<phingcall target="unittests" />
	</target>

	<!-- ============================================ -->
	<!-- Target: lint (Checks code syntax) -->
	<!-- ============================================ -->
	<target name="lint">
		<echo msg="Running lint to check code syntax..." />
		<phplint>
			<fileset refid="sources" />
		</phplint>
	</target>

	<!-- ============================================ -->
	<!-- Target: codestyle (Checks code style compliance) -->
	<!-- ============================================ -->
	<target name="codestyle" depends="prepare-codecheck-dir">
		<echo msg="Running code sniffer to check PSR2 standard..." />
		<phpcodesniffer standard="PSR2" showSniffs="true" showWarnings="true" verbosity="0" encoding="UTF-8">
			<fileset refid="sources" />
			<formatter type="full" outfile="${dir.reports.codecheck}/reportcs.txt" />
			<formatter type="checkstyle" outfile="${dir.reports.codecheck}/checkstylecs.xml" />
		</phpcodesniffer>
	</target>

	<!-- ============================================ -->
	<!-- Target: mess (Detects mess in code. Recommended rulesets: -->
	<!-- unusedcode,codesize,controversial,design,naming) -->
	<!-- ============================================ -->
	<target name="mess" depends="prepare-codecheck-dir">
		<echo msg="Running mess detector" />
		<phpmd rulesets="unusedcode,codesize,controversial,design,naming">
			<fileset refid="sources" />
			<formatter type="xml" outfile="${dir.reports.codecheck}/pmd.xml" />
		</phpmd>
	</target>

	<!-- ============================================ -->
	<!-- Target: copypaste (detects copy/paste in code) -->
	<!-- ============================================ -->
	<target name="copypaste" depends="prepare-codecheck-dir">
		<echo msg="Running copy/paste detector..." />
		<phpcpd>
			<fileset refid="sources" />
			<formatter type="pmd" outfile="${dir.reports.codecheck}/pmd-cpd.xml" />
		</phpcpd>
	</target>

	<!-- ============================================ -->
	<!-- Target: measure (measures the code) -->
	<!-- ============================================ -->
	<target name="measure" depends="prepare-codecheck-dir, prepare-pdepend-dir">
		<echo msg="Running code measurements..." />
		<phploc reportType="csv" reportName="phploc" reportDirectory="${dir.reports.codecheck}">
			<fileset refid="sources" />
		</phploc>
		<phpdepend>
			<fileset refid="sources" />
			<logger type="jdepend-xml" outfile="${dir.reports.pdepend}/jdepend.xml" />
			<analyzer type="coderank-mode" value="method" />
		</phpdepend>
	</target>

	<!-- ============================================ -->
	<!-- Target: documentation (PHP Documentor parsing) -->
	<!-- ============================================ -->
	<target name="documentation" depends="prepare-doc-dir">
		<phpdoc2 title="Project Documentation" destdir="${dir.docs.phpdoc}" template="responsive-twig">
			<fileset refid="sources" />
		</phpdoc2>
	</target>

	<!-- ============================================ -->
	<!-- Target: unittests (unit testing) -->
	<!-- ============================================ -->
	<target name="unittests" depends="prepare-tests-dir">
		<echo msg="Running unit tests..." />
		<coverage-setup database="${dir.reports.unit}/coverage.db">
			<fileset refid="sources" />
		</coverage-setup>
		<phpunit configuration="${dir.tests}/phpunit.xml" codecoverage="true">
			<formatter todir="${dir.reports.unit}" type="xml" />
			<formatter todir="${dir.reports.unit}" type="clover" />
			<batchtest>
				<fileset dir="${dir.tests.unit}" />
			</batchtest>
		</phpunit>
		<coverage-report outfile="${dir.reports.unit}/coverage.xml">
			<report todir="${dir.reports.coverage}" title="Phing unit tests run" usesorttable="true" />
		</coverage-report>
	</target>
</project>
